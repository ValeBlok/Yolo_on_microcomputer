import os
import time
import cv2
from ultralytics import YOLO
import psutil
from gpiozero import CPUTemperature
from datetime import datetime
from threading import Thread
from ultralytics import YOLO
import os

MODEL = "models/yolov8n.pt"
VIDEO_PATH = "video/street_short.mp4"
OUTPUT_FILE = f"share/results_r5/video_results_{MODEL.split('.')[0]}.txt"

class VideoProcessor:
    def __init__(self):
        self.model = YOLO(MODEL)
        self.frame_count = 0
        self.start_time = 0
        self.system_monitor = SystemMonitor()

    def process_video(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ"""
        cap = cv2.VideoCapture(VIDEO_PATH)
        if not cap.isOpened():
            print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞!")
            return

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∏–¥–µ–æ
        fps = cap.get(cv2.CAP_PROP_FPS)
        total_frames = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))
        
        print(f"\nüîç –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ (FPS: {fps:.1f}, –∫–∞–¥—Ä–æ–≤: {total_frames})")

        # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã
        self.system_monitor.start()
        self.start_time = time.time()

        while True:
            ret, frame = cap.read()
            if not ret:
                break

            self.frame_count += 1
            self.process_frame(frame)

            # –í—ã–≤–æ–¥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫–∞–∂–¥—ã–µ 10 –∫–∞–¥—Ä–æ–≤
            if self.frame_count % 10 == 0:
                self.print_progress(total_frames)

        # –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è
        cap.release()
        self.print_final_stats(total_frames)

    def process_frame(self, frame):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω –∫–∞–¥—Ä"""
        results = self.model(frame,
                            imgsz=640,
                            verbose=False)
        
        # –î–µ—Ç–µ–∫—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ (–¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏)
        detected = []
        for box in results[0].boxes:
            class_id = int(box.cls.item())
            detected.append(self.model.names[class_id])

        # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–¥—Ä–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        if len(detected) > 0:
            print(f"–ö–∞–¥—Ä {self.frame_count}: –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ {', '.join(detected)}")

    def print_progress(self, total_frames):
        """–í—ã–≤–æ–¥–∏—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        elapsed = time.time() - self.start_time
        current_fps = self.frame_count / elapsed
        remaining = (total_frames - self.frame_count) / current_fps
        
        print(
            f"\rüìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {self.frame_count}/{total_frames} | "
            f"FPS: {current_fps:.1f} | "
            f"–í—Ä–µ–º—è: {elapsed:.1f}—Å | "
            f"–û—Å—Ç–∞–ª–æ—Å—å: {remaining:.1f}—Å",
            end="", flush=True
        )

    def print_final_stats(self, total_frames):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Ñ–∞–π–ª stats.txt"""
        total_time = time.time() - self.start_time
        sys_metrics = self.system_monitor.stop()
        
        stats_content = f"""‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!
            ‚Ä¢ –ö–∞–¥—Ä–æ–≤: {self.frame_count}/{total_frames}
            ‚Ä¢ –í—Ä–µ–º—è: {total_time:.2f} —Å–µ–∫
            ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π FPS: {self.frame_count/total_time:.2f}
            ‚Ä¢ CPU: {sys_metrics['cpu_avg']:.1f}% (–ø–∏–∫: {sys_metrics['cpu_max']:.1f}%)
            ‚Ä¢ RAM: {sys_metrics['ram_avg']:.2f} MB (–ø–∏–∫: {sys_metrics['ram_max']:.2f} MB)"""
        
        if sys_metrics['temp_avg'] >= 0:
            stats_content += f"\n‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ CPU: {sys_metrics['temp_avg']:.1f}¬∞C"
        
        # –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª
        with open(OUTPUT_FILE, "w") as f:
            f.write(stats_content)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –≤—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        print(f"\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: {OUTPUT_FILE}")

class SystemMonitor:
    def __init__(self):
        self.measurements = {
            'cpu': [], 
            'ram': [],
            'temp': []
        }
        self._running = False

    def start(self):
        self._running = True
        Thread(target=self._monitor).start()

    def _monitor(self):
        while self._running:
            self.measurements['cpu'].append(psutil.cpu_percent(interval=0.5))
            self.measurements['ram'].append(psutil.virtual_memory().used / (1024 ** 2))
            try:
                temp = CPUTemperature().temperature
                self.measurements['temp'].append(float(temp))
            except:
                pass

    def stop(self):
        self._running = False
        time.sleep(0.6)  # –î–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –∏–∑–º–µ—Ä–µ–Ω–∏—é –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è
        
        return {
            'cpu_avg': sum(self.measurements['cpu']) / len(self.measurements['cpu']),
            'cpu_max': max(self.measurements['cpu']),
            'ram_avg': sum(self.measurements['ram']) / len(self.measurements['ram']),
            'ram_max': max(self.measurements['ram']),
            'temp_avg': sum(self.measurements['temp'])/len(self.measurements['temp']) if self.measurements['temp'] else -1
        }

if __name__ == "__main__":
    processor = VideoProcessor()
    processor.process_video()
